// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ProtoCache.Tests.fb
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Vec1D : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Vec1D GetRootAsVec1D(ByteBuffer _bb) { return GetRootAsVec1D(_bb, new Vec1D()); }
  public static Vec1D GetRootAsVec1D(ByteBuffer _bb, Vec1D obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Vec1D __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float _(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int _Length { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> Get_Bytes() { return __p.__vector_as_span<float>(4, 4); }
#else
  public ArraySegment<byte>? Get_Bytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public float[] Get_Array() { return __p.__vector_as_array<float>(4); }

  public static Offset<global::ProtoCache.Tests.fb.Vec1D> CreateVec1D(FlatBufferBuilder builder,
      VectorOffset _Offset = default(VectorOffset)) {
    builder.StartTable(1);
    Vec1D.Add_(builder, _Offset);
    return Vec1D.EndVec1D(builder);
  }

  public static void StartVec1D(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void Add_(FlatBufferBuilder builder, VectorOffset _Offset) { builder.AddOffset(0, _Offset.Value, 0); }
  public static VectorOffset Create_Vector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset Create_VectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset Create_VectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset Create_VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void Start_Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<global::ProtoCache.Tests.fb.Vec1D> EndVec1D(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<global::ProtoCache.Tests.fb.Vec1D>(o);
  }
}


static public class Vec1DVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*_*/, 4 /*float*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
