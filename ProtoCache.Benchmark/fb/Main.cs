// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ProtoCache.Tests.fb
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Main : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Main GetRootAsMain(ByteBuffer _bb) { return GetRootAsMain(_bb, new Main()); }
  public static Main GetRootAsMain(ByteBuffer _bb, Main obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyMain(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, MainVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Main __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int I32 { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public uint U32 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public long I64 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public ulong U64 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public bool Flag { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public global::ProtoCache.Tests.fb.Mode Mode { get { int o = __p.__offset(14); return o != 0 ? (global::ProtoCache.Tests.fb.Mode)__p.bb.GetSbyte(o + __p.bb_pos) : global::ProtoCache.Tests.fb.Mode.MODE_A; } }
  public string Str { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetStrBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetStrArray() { return __p.__vector_as_array<byte>(16); }
  public sbyte Data(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int DataLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetDataBytes() { return __p.__vector_as_span<sbyte>(18, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public sbyte[] GetDataArray() { return __p.__vector_as_array<sbyte>(18); }
  public float F32 { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public double F64 { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public global::ProtoCache.Tests.fb.Small? Object { get { int o = __p.__offset(24); return o != 0 ? (global::ProtoCache.Tests.fb.Small?)(new global::ProtoCache.Tests.fb.Small()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int I32v(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int I32vLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetI32vBytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetI32vBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetI32vArray() { return __p.__vector_as_array<int>(26); }
  public ulong U64v(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetUlong(__p.__vector(o) + j * 8) : (ulong)0; }
  public int U64vLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ulong> GetU64vBytes() { return __p.__vector_as_span<ulong>(28, 8); }
#else
  public ArraySegment<byte>? GetU64vBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public ulong[] GetU64vArray() { return __p.__vector_as_array<ulong>(28); }
  public string Strv(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int StrvLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  public global::ProtoCache.Tests.fb.Bytes_? Datav(int j) { int o = __p.__offset(32); return o != 0 ? (global::ProtoCache.Tests.fb.Bytes_?)(new global::ProtoCache.Tests.fb.Bytes_()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatavLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float F32v(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int F32vLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetF32vBytes() { return __p.__vector_as_span<float>(34, 4); }
#else
  public ArraySegment<byte>? GetF32vBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public float[] GetF32vArray() { return __p.__vector_as_array<float>(34); }
  public double F64v(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int F64vLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetF64vBytes() { return __p.__vector_as_span<double>(36, 8); }
#else
  public ArraySegment<byte>? GetF64vBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public double[] GetF64vArray() { return __p.__vector_as_array<double>(36); }
  public bool Flags(int j) { int o = __p.__offset(38); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int FlagsLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<bool> GetFlagsBytes() { return __p.__vector_as_span<bool>(38, 1); }
#else
  public ArraySegment<byte>? GetFlagsBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public bool[] GetFlagsArray() { return __p.__vector_as_array<bool>(38); }
  public global::ProtoCache.Tests.fb.Small? Objectv(int j) { int o = __p.__offset(40); return o != 0 ? (global::ProtoCache.Tests.fb.Small?)(new global::ProtoCache.Tests.fb.Small()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ObjectvLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  public uint TU32 { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public int TI32 { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TS32 { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public ulong TU64 { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public long TI64 { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TS64 { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public global::ProtoCache.Tests.fb.Map1Entry? Index(int j) { int o = __p.__offset(54); return o != 0 ? (global::ProtoCache.Tests.fb.Map1Entry?)(new global::ProtoCache.Tests.fb.Map1Entry()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int IndexLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
  public global::ProtoCache.Tests.fb.Map1Entry? IndexByKey(string key) { int o = __p.__offset(54); return o != 0 ? global::ProtoCache.Tests.fb.Map1Entry.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public global::ProtoCache.Tests.fb.Map2Entry? Objects(int j) { int o = __p.__offset(56); return o != 0 ? (global::ProtoCache.Tests.fb.Map2Entry?)(new global::ProtoCache.Tests.fb.Map2Entry()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ObjectsLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
  public global::ProtoCache.Tests.fb.Map2Entry? ObjectsByKey(int key) { int o = __p.__offset(56); return o != 0 ? global::ProtoCache.Tests.fb.Map2Entry.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public global::ProtoCache.Tests.fb.Vec2D? Matrix { get { int o = __p.__offset(58); return o != 0 ? (global::ProtoCache.Tests.fb.Vec2D?)(new global::ProtoCache.Tests.fb.Vec2D()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public global::ProtoCache.Tests.fb.ArrMap? Vector(int j) { int o = __p.__offset(60); return o != 0 ? (global::ProtoCache.Tests.fb.ArrMap?)(new global::ProtoCache.Tests.fb.ArrMap()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int VectorLength { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }
  public global::ProtoCache.Tests.fb.ArrMap? Arrays { get { int o = __p.__offset(62); return o != 0 ? (global::ProtoCache.Tests.fb.ArrMap?)(new global::ProtoCache.Tests.fb.ArrMap()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<global::ProtoCache.Tests.fb.Main> CreateMain(FlatBufferBuilder builder,
      int i32 = 0,
      uint u32 = 0,
      long i64 = 0,
      ulong u64 = 0,
      bool flag = false,
      global::ProtoCache.Tests.fb.Mode mode = global::ProtoCache.Tests.fb.Mode.MODE_A,
      StringOffset strOffset = default(StringOffset),
      VectorOffset dataOffset = default(VectorOffset),
      float f32 = 0.0f,
      double f64 = 0.0,
      Offset<global::ProtoCache.Tests.fb.Small> @objectOffset = default(Offset<global::ProtoCache.Tests.fb.Small>),
      VectorOffset i32vOffset = default(VectorOffset),
      VectorOffset u64vOffset = default(VectorOffset),
      VectorOffset strvOffset = default(VectorOffset),
      VectorOffset datavOffset = default(VectorOffset),
      VectorOffset f32vOffset = default(VectorOffset),
      VectorOffset f64vOffset = default(VectorOffset),
      VectorOffset flagsOffset = default(VectorOffset),
      VectorOffset objectvOffset = default(VectorOffset),
      uint t_u32 = 0,
      int t_i32 = 0,
      int t_s32 = 0,
      ulong t_u64 = 0,
      long t_i64 = 0,
      long t_s64 = 0,
      VectorOffset indexOffset = default(VectorOffset),
      VectorOffset objectsOffset = default(VectorOffset),
      Offset<global::ProtoCache.Tests.fb.Vec2D> matrixOffset = default(Offset<global::ProtoCache.Tests.fb.Vec2D>),
      VectorOffset vectorOffset = default(VectorOffset),
      Offset<global::ProtoCache.Tests.fb.ArrMap> arraysOffset = default(Offset<global::ProtoCache.Tests.fb.ArrMap>)) {
    builder.StartTable(30);
    Main.AddTS64(builder, t_s64);
    Main.AddTI64(builder, t_i64);
    Main.AddTU64(builder, t_u64);
    Main.AddF64(builder, f64);
    Main.AddU64(builder, u64);
    Main.AddI64(builder, i64);
    Main.AddArrays(builder, arraysOffset);
    Main.AddVector(builder, vectorOffset);
    Main.AddMatrix(builder, matrixOffset);
    Main.AddObjects(builder, objectsOffset);
    Main.AddIndex(builder, indexOffset);
    Main.AddTS32(builder, t_s32);
    Main.AddTI32(builder, t_i32);
    Main.AddTU32(builder, t_u32);
    Main.AddObjectv(builder, objectvOffset);
    Main.AddFlags(builder, flagsOffset);
    Main.AddF64v(builder, f64vOffset);
    Main.AddF32v(builder, f32vOffset);
    Main.AddDatav(builder, datavOffset);
    Main.AddStrv(builder, strvOffset);
    Main.AddU64v(builder, u64vOffset);
    Main.AddI32v(builder, i32vOffset);
    Main.AddObject(builder, @objectOffset);
    Main.AddF32(builder, f32);
    Main.AddData(builder, dataOffset);
    Main.AddStr(builder, strOffset);
    Main.AddU32(builder, u32);
    Main.AddI32(builder, i32);
    Main.AddMode(builder, mode);
    Main.AddFlag(builder, flag);
    return Main.EndMain(builder);
  }

  public static void StartMain(FlatBufferBuilder builder) { builder.StartTable(30); }
  public static void AddI32(FlatBufferBuilder builder, int i32) { builder.AddInt(0, i32, 0); }
  public static void AddU32(FlatBufferBuilder builder, uint u32) { builder.AddUint(1, u32, 0); }
  public static void AddI64(FlatBufferBuilder builder, long i64) { builder.AddLong(2, i64, 0); }
  public static void AddU64(FlatBufferBuilder builder, ulong u64) { builder.AddUlong(3, u64, 0); }
  public static void AddFlag(FlatBufferBuilder builder, bool flag) { builder.AddBool(4, flag, false); }
  public static void AddMode(FlatBufferBuilder builder, global::ProtoCache.Tests.fb.Mode mode) { builder.AddSbyte(5, (sbyte)mode, 0); }
  public static void AddStr(FlatBufferBuilder builder, StringOffset strOffset) { builder.AddOffset(6, strOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(7, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<sbyte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<sbyte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddF32(FlatBufferBuilder builder, float f32) { builder.AddFloat(8, f32, 0.0f); }
  public static void AddF64(FlatBufferBuilder builder, double f64) { builder.AddDouble(9, f64, 0.0); }
  public static void AddObject(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.Small> objectOffset) { builder.AddOffset(10, objectOffset.Value, 0); }
  public static void AddI32v(FlatBufferBuilder builder, VectorOffset i32vOffset) { builder.AddOffset(11, i32vOffset.Value, 0); }
  public static VectorOffset CreateI32vVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateI32vVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateI32vVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateI32vVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartI32vVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddU64v(FlatBufferBuilder builder, VectorOffset u64vOffset) { builder.AddOffset(12, u64vOffset.Value, 0); }
  public static VectorOffset CreateU64vVector(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddUlong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateU64vVectorBlock(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateU64vVectorBlock(FlatBufferBuilder builder, ArraySegment<ulong> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateU64vVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<ulong>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartU64vVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddStrv(FlatBufferBuilder builder, VectorOffset strvOffset) { builder.AddOffset(13, strvOffset.Value, 0); }
  public static VectorOffset CreateStrvVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStrvVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStrvVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStrvVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStrvVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDatav(FlatBufferBuilder builder, VectorOffset datavOffset) { builder.AddOffset(14, datavOffset.Value, 0); }
  public static VectorOffset CreateDatavVector(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.Bytes_>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatavVectorBlock(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.Bytes_>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDatavVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<global::ProtoCache.Tests.fb.Bytes_>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDatavVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<global::ProtoCache.Tests.fb.Bytes_>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDatavVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddF32v(FlatBufferBuilder builder, VectorOffset f32vOffset) { builder.AddOffset(15, f32vOffset.Value, 0); }
  public static VectorOffset CreateF32vVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateF32vVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateF32vVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateF32vVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartF32vVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddF64v(FlatBufferBuilder builder, VectorOffset f64vOffset) { builder.AddOffset(16, f64vOffset.Value, 0); }
  public static VectorOffset CreateF64vVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateF64vVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateF64vVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateF64vVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartF64vVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddFlags(FlatBufferBuilder builder, VectorOffset flagsOffset) { builder.AddOffset(17, flagsOffset.Value, 0); }
  public static VectorOffset CreateFlagsVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFlagsVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFlagsVectorBlock(FlatBufferBuilder builder, ArraySegment<bool> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFlagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<bool>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFlagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddObjectv(FlatBufferBuilder builder, VectorOffset objectvOffset) { builder.AddOffset(18, objectvOffset.Value, 0); }
  public static VectorOffset CreateObjectvVector(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.Small>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObjectvVectorBlock(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.Small>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectvVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<global::ProtoCache.Tests.fb.Small>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectvVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<global::ProtoCache.Tests.fb.Small>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartObjectvVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTU32(FlatBufferBuilder builder, uint tU32) { builder.AddUint(19, tU32, 0); }
  public static void AddTI32(FlatBufferBuilder builder, int tI32) { builder.AddInt(20, tI32, 0); }
  public static void AddTS32(FlatBufferBuilder builder, int tS32) { builder.AddInt(21, tS32, 0); }
  public static void AddTU64(FlatBufferBuilder builder, ulong tU64) { builder.AddUlong(22, tU64, 0); }
  public static void AddTI64(FlatBufferBuilder builder, long tI64) { builder.AddLong(23, tI64, 0); }
  public static void AddTS64(FlatBufferBuilder builder, long tS64) { builder.AddLong(24, tS64, 0); }
  public static void AddIndex(FlatBufferBuilder builder, VectorOffset indexOffset) { builder.AddOffset(25, indexOffset.Value, 0); }
  public static VectorOffset CreateIndexVector(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.Map1Entry>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIndexVectorBlock(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.Map1Entry>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIndexVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<global::ProtoCache.Tests.fb.Map1Entry>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIndexVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<global::ProtoCache.Tests.fb.Map1Entry>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIndexVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddObjects(FlatBufferBuilder builder, VectorOffset objectsOffset) { builder.AddOffset(26, objectsOffset.Value, 0); }
  public static VectorOffset CreateObjectsVector(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.Map2Entry>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObjectsVectorBlock(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.Map2Entry>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<global::ProtoCache.Tests.fb.Map2Entry>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<global::ProtoCache.Tests.fb.Map2Entry>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartObjectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMatrix(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.Vec2D> matrixOffset) { builder.AddOffset(27, matrixOffset.Value, 0); }
  public static void AddVector(FlatBufferBuilder builder, VectorOffset vectorOffset) { builder.AddOffset(28, vectorOffset.Value, 0); }
  public static VectorOffset CreateVectorVector(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.ArrMap>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVectorVectorBlock(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.ArrMap>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVectorVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<global::ProtoCache.Tests.fb.ArrMap>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVectorVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<global::ProtoCache.Tests.fb.ArrMap>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVectorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddArrays(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.ArrMap> arraysOffset) { builder.AddOffset(29, arraysOffset.Value, 0); }
  public static Offset<global::ProtoCache.Tests.fb.Main> EndMain(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<global::ProtoCache.Tests.fb.Main>(o);
  }
  public static void FinishMainBuffer(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.Main> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMainBuffer(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.Main> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class MainVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*I32*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*U32*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*I64*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*U64*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*Flag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*Mode*/, 1 /*global::ProtoCache.Tests.fb.Mode*/, 1, false)
      && verifier.VerifyString(tablePos, 16 /*Str*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*Data*/, 1 /*sbyte*/, false)
      && verifier.VerifyField(tablePos, 20 /*F32*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*F64*/, 8 /*double*/, 8, false)
      && verifier.VerifyTable(tablePos, 24 /*Object*/, global::ProtoCache.Tests.fb.SmallVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*I32v*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 28 /*U64v*/, 8 /*ulong*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*Strv*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 32 /*Datav*/, global::ProtoCache.Tests.fb.Bytes_Verify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 34 /*F32v*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 36 /*F64v*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 38 /*Flags*/, 1 /*bool*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 40 /*Objectv*/, global::ProtoCache.Tests.fb.SmallVerify.Verify, false)
      && verifier.VerifyField(tablePos, 42 /*TU32*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*TI32*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*TS32*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*TU64*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*TI64*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*TS64*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfTables(tablePos, 54 /*Index*/, global::ProtoCache.Tests.fb.Map1EntryVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 56 /*Objects*/, global::ProtoCache.Tests.fb.Map2EntryVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 58 /*Matrix*/, global::ProtoCache.Tests.fb.Vec2DVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 60 /*Vector*/, global::ProtoCache.Tests.fb.ArrMapVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 62 /*Arrays*/, global::ProtoCache.Tests.fb.ArrMapVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
