// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ProtoCache.Tests.fb
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Map1Entry : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Map1Entry GetRootAsMap1Entry(ByteBuffer _bb) { return GetRootAsMap1Entry(_bb, new Map1Entry()); }
  public static Map1Entry GetRootAsMap1Entry(ByteBuffer _bb, Map1Entry obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Map1Entry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Key { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetKeyArray() { return __p.__vector_as_array<byte>(4); }
  public int Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<global::ProtoCache.Tests.fb.Map1Entry> CreateMap1Entry(FlatBufferBuilder builder,
      StringOffset keyOffset = default(StringOffset),
      int value = 0) {
    builder.StartTable(2);
    Map1Entry.AddValue(builder, value);
    Map1Entry.AddKey(builder, keyOffset);
    return Map1Entry.EndMap1Entry(builder);
  }

  public static void StartMap1Entry(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddKey(FlatBufferBuilder builder, StringOffset keyOffset) { builder.AddOffset(0, keyOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(1, value, 0); }
  public static Offset<global::ProtoCache.Tests.fb.Map1Entry> EndMap1Entry(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // key
    return new Offset<global::ProtoCache.Tests.fb.Map1Entry>(o);
  }

  public static VectorOffset CreateSortedVectorOfMap1Entry(FlatBufferBuilder builder, Offset<Map1Entry>[] offsets) {
    Array.Sort(offsets,
      (Offset<Map1Entry> o1, Offset<Map1Entry> o2) =>
        new Map1Entry().__assign(builder.DataBuffer.Length - o1.Value, builder.DataBuffer).Key.CompareTo(new Map1Entry().__assign(builder.DataBuffer.Length - o2.Value, builder.DataBuffer).Key));
    return builder.CreateVectorOfTables(offsets);
  }

  public static Map1Entry? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    Map1Entry obj_ = new Map1Entry();
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      obj_.__assign(tableOffset, bb);
      int comp = obj_.Key.CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return obj_;
      }
    }
    return null;
  }
}


static public class Map1EntryVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Key*/, true)
      && verifier.VerifyField(tablePos, 6 /*Value*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
