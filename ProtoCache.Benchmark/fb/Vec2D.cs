// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ProtoCache.Tests.fb
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Vec2D : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Vec2D GetRootAsVec2D(ByteBuffer _bb) { return GetRootAsVec2D(_bb, new Vec2D()); }
  public static Vec2D GetRootAsVec2D(ByteBuffer _bb, Vec2D obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Vec2D __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public global::ProtoCache.Tests.fb.Vec1D? _(int j) { int o = __p.__offset(4); return o != 0 ? (global::ProtoCache.Tests.fb.Vec1D?)(new global::ProtoCache.Tests.fb.Vec1D()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int _Length { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<global::ProtoCache.Tests.fb.Vec2D> CreateVec2D(FlatBufferBuilder builder,
      VectorOffset _Offset = default(VectorOffset)) {
    builder.StartTable(1);
    Vec2D.Add_(builder, _Offset);
    return Vec2D.EndVec2D(builder);
  }

  public static void StartVec2D(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void Add_(FlatBufferBuilder builder, VectorOffset _Offset) { builder.AddOffset(0, _Offset.Value, 0); }
  public static VectorOffset Create_Vector(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.Vec1D>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset Create_VectorBlock(FlatBufferBuilder builder, Offset<global::ProtoCache.Tests.fb.Vec1D>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset Create_VectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<global::ProtoCache.Tests.fb.Vec1D>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset Create_VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<global::ProtoCache.Tests.fb.Vec1D>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void Start_Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<global::ProtoCache.Tests.fb.Vec2D> EndVec2D(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<global::ProtoCache.Tests.fb.Vec2D>(o);
  }
}


static public class Vec2DVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*_*/, global::ProtoCache.Tests.fb.Vec1DVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
